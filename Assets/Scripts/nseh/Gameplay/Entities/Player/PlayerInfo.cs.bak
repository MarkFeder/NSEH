using nseh.Gameplay.Movement;
using System;
using UnityEngine;
using Inputs = nseh.Utils.Constants.Input;

namespace nseh.Gameplay.Entities.Player
{
    public class PlayerInfo : MonoBehaviour
    {

<<<<<<< Updated upstream
    //Container class: Contains properties about players choices and level logic variables related to prefab
    private float horizontal;
    private float vertical;
    private int gamepadIndex;
    [Range(1, 4)]
    private int player;
    private bool teletransported;
    [SerializeField]
    private Sprite characterPortrait;
=======
        //Container class: Contains properties about players choices and level logic variables related to prefab
>>>>>>> Stashed changes

        #region Public Properties

        public int gamepadIndex;

        [Header("Damages of attacks")]
        public float damageAttackA;
        public float damageAttackB;
        public float damageComboAAA01;
        public float damageComboAAA02;
        public float damageComboBB01;
        public float damageComboBSharp;
        public float damageDefinitive;
        public float damnageHability;

        #endregion

        #region Private Properties

        private float horizontal;
        private float vertical;

        [Range(1, 4)]
        private int player;

        private bool teletransported;
        private bool jumpPressed;

        #endregion

        #region Public C# Properties

        public float Horizontal
        {
            get
            {
                return this.horizontal;
            }

            set
            {
                this.horizontal = value;
            }
        }

        public float Vertical
        {
            get
            {
                return this.vertical;
            }

            set
            {
                this.vertical = value;
            }
        }

        public int GamepadIndex
        {
            get
            {
                return this.gamepadIndex;
            }

            set
            {
                this.gamepadIndex = value;
            }
        }

        public int Player
        {
            get
            {
                return this.player;
            }

            set
            {
                this.player = value;
            }
        }

        public bool Teletransported
        {
            get
            {
                return this.teletransported;
            }

            set
            {
                this.teletransported = value;
            }
        } 

        public bool JumpPressed
        {
            get
            {
                return this.jumpPressed;
            }
        }

        public float DamageAttackA { get { return this.damageAttackA; } }
        public float DamageAttackB { get { return this.damageAttackB; } }
        public float DamageComboAAA01 { get { return this.damageComboAAA01; } }
        public float DamageComboAAA02 { get { return this.damageComboAAA02; } }
        public float DamageComboBB01 { get { return this.damageComboBB01; } }
        public float DamageComboBSharp { get { return this.damageComboBSharp; } }
        public float DamageDefinitive { get { return this.damageDefinitive; } }
        public float DamnageHability { get { return this.damnageHability; } }

        #endregion

        void Start()
        {
            this.Teletransported = false;

            this.jumpPressed = false;
        }

<<<<<<< Updated upstream
    public Sprite CharacterPortrait
    {
        get
        {
            return (this.characterPortrait) ? this.characterPortrait : null;
        }
    }

    void Start()
    {
        this.GamepadIndex = this.gameObject.GetComponent<PlayerMovement>().gamepadIndex;
        this.Teletransported = false;
    }
=======
        void Update()
        {
            this.horizontal = Input.GetAxis(String.Format("{0}{1}", Inputs.AXIS_HORIZONTAL_GAMEPAD, this.gamepadIndex));
            this.vertical = Input.GetAxis(String.Format("{0}{1}", Inputs.AXIS_VERTICAL_GAMEPAD, this.gamepadIndex));
>>>>>>> Stashed changes

            this.jumpPressed = Input.GetButtonDown(String.Format("{0}{1}", Inputs.JUMP, this.gamepadIndex));
        }
    } 
}
